// Generated by CoffeeScript 1.9.1
var COMBO_SPLIT, COMBO_STR, ETag, Tools, _combo, assetsBasePath, config, fs, path;

path = require("path");

fs = require("fs");

Tools = require('./tools');

ETag = require('etag');

config = Tools.getJSONSync("config.json");

assetsBasePath = null;

COMBO_STR = config.combo_str || "??";

COMBO_SPLIT = config.combo_split || ",";

_combo = function(req, res) {
  var addToList, basePath, comboIndex, comboPath, fileExt, fileLastModifyed, fileLastModifyedStat, fileList, fileSize, i, len, p, url;
  url = req.url;
  fileList = [];
  fileExt = null;
  fileSize = 0;
  fileLastModifyed = null;
  fileLastModifyedStat = null;
  addToList = function(file) {
    var ext, stat;
    if (fs.existsSync(file) && fs.statSync(file).isFile()) {
      stat = fs.statSync(file);
      if (stat.isFile()) {
        ext = path.extname(file);
        if (!fileExt || fileExt === ext) {
          fileExt = ext;
          fileSize += stat.size;
          if (!fileLastModifyed || stat.mtime > fileLastModifyed) {
            fileLastModifyed = stat.mtime;
            fileLastModifyedStat = stat;
          }
          return fileList.push(file);
        }
      }
    }
  };
  url = path.normalize(url.replace(/\.\./g, ''));
  comboIndex = url.indexOf(COMBO_STR);
  if (comboIndex > -1) {
    basePath = url.slice(0, comboIndex);
    comboPath = url.slice(comboIndex + COMBO_STR.length).split(COMBO_SPLIT);
    console.log(comboPath);
    for (i = 0, len = comboPath.length; i < len; i++) {
      p = comboPath[i];
      addToList(path.join(assetsBasePath, basePath, p));
    }
  } else {
    addToList(path.join(assetsBasePath, url));
  }
  if (fileList.length > 1) {
    res.type(fileExt);
    res.set({
      'Cache-Control': 'public, max-age=31536000',
      'Last-Modified': fileLastModifyed,
      'Content-Length': fileSize,
      'ETag': ETag(fileLastModifyedStat)
    });
    console.log(fileList);
    return Tools.deepDo(fileList, function(p, cb) {
      var Stream;
      Stream = fs.createReadStream(p, {
        encoding: 'utf8'
      });
      Stream.pipe(res, {
        end: false
      });
      return Stream.on('end', function() {
        return cb();
      });
    }, function() {}, function() {
      return res.end();
    });
  } else if (fileList.length === 1) {
    return res.sendFile(fileList[0], {
      maxAge: Infinity
    });
  } else {
    return res.sendStatus(404);
  }
};

module.exports = function(p) {
  assetsBasePath = p;
  return _combo;
};
